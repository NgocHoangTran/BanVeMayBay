//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlightTicket.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_A6C0B2_Nhom13FlightTicketEntities : DbContext
    {
        public DB_A6C0B2_Nhom13FlightTicketEntities()
            : base("name=DB_A6C0B2_Nhom13FlightTicketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ChiTietChuyenBay> ChiTietChuyenBays { get; set; }
        public virtual DbSet<ChoNgoi> ChoNgois { get; set; }
        public virtual DbSet<ChuyenBay> ChuyenBays { get; set; }
        public virtual DbSet<DonGia> DonGias { get; set; }
        public virtual DbSet<HangVe> HangVes { get; set; }
        public virtual DbSet<HangVeCuaChuyenBay> HangVeCuaChuyenBays { get; set; }
        public virtual DbSet<NguoiDung> NguoiDungs { get; set; }
        public virtual DbSet<Quyen> Quyens { get; set; }
        public virtual DbSet<SanBay> SanBays { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<VeChuyenBay> VeChuyenBays { get; set; }
    
        public virtual ObjectResult<getChoNgoi_Result> getChoNgoi(Nullable<int> sBDi, Nullable<int> sBDen, Nullable<int> hangVe)
        {
            var sBDiParameter = sBDi.HasValue ?
                new ObjectParameter("SBDi", sBDi) :
                new ObjectParameter("SBDi", typeof(int));
    
            var sBDenParameter = sBDen.HasValue ?
                new ObjectParameter("SBDen", sBDen) :
                new ObjectParameter("SBDen", typeof(int));
    
            var hangVeParameter = hangVe.HasValue ?
                new ObjectParameter("HangVe", hangVe) :
                new ObjectParameter("HangVe", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getChoNgoi_Result>("getChoNgoi", sBDiParameter, sBDenParameter, hangVeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getGia(Nullable<int> maCB, Nullable<int> maHV)
        {
            var maCBParameter = maCB.HasValue ?
                new ObjectParameter("MaCB", maCB) :
                new ObjectParameter("MaCB", typeof(int));
    
            var maHVParameter = maHV.HasValue ?
                new ObjectParameter("MaHV", maHV) :
                new ObjectParameter("MaHV", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getGia", maCBParameter, maHVParameter);
        }
    
        public virtual ObjectResult<getMonthTotal_Result> getMonthTotal(Nullable<System.DateTime> date, Nullable<int> maCB)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var maCBParameter = maCB.HasValue ?
                new ObjectParameter("MaCB", maCB) :
                new ObjectParameter("MaCB", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getMonthTotal_Result>("getMonthTotal", dateParameter, maCBParameter);
        }
    
        public virtual ObjectResult<getNameSB_Result> getNameSB(Nullable<int> maCB)
        {
            var maCBParameter = maCB.HasValue ?
                new ObjectParameter("MaCB", maCB) :
                new ObjectParameter("MaCB", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getNameSB_Result>("getNameSB", maCBParameter);
        }
    
        public virtual ObjectResult<getYearTotal_Result> getYearTotal(Nullable<System.DateTime> date, Nullable<int> month)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getYearTotal_Result>("getYearTotal", dateParameter, monthParameter);
        }
    
        public virtual int Insert_ChoNgoi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_ChoNgoi");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getGia(Nullable<int> sBDi, Nullable<int> sBDen, Nullable<int> hangVe)
        {
            var sBDiParameter = sBDi.HasValue ?
                new ObjectParameter("SBDi", sBDi) :
                new ObjectParameter("SBDi", typeof(int));
    
            var sBDenParameter = sBDen.HasValue ?
                new ObjectParameter("SBDen", sBDen) :
                new ObjectParameter("SBDen", typeof(int));
    
            var hangVeParameter = hangVe.HasValue ?
                new ObjectParameter("HangVe", hangVe) :
                new ObjectParameter("HangVe", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getGia", sBDiParameter, sBDenParameter, hangVeParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_Login_Result> sp_Login(string email, string pass)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Login_Result>("sp_Login", emailParameter, passParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
